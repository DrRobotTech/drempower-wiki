// Generated by gencpp from file drempower/pv_msg.msg
// DO NOT EDIT!


#ifndef DREMPOWER_MESSAGE_PV_MSG_H
#define DREMPOWER_MESSAGE_PV_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drempower
{
template <class ContainerAllocator>
struct pv_msg_
{
  typedef pv_msg_<ContainerAllocator> Type;

  pv_msg_()
    : id_list()
    , input_vel_list()
    , vel_ramp_rate_list()  {
    }
  pv_msg_(const ContainerAllocator& _alloc)
    : id_list(_alloc)
    , input_vel_list(_alloc)
    , vel_ramp_rate_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _id_list_type;
  _id_list_type id_list;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _input_vel_list_type;
  _input_vel_list_type input_vel_list;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _vel_ramp_rate_list_type;
  _vel_ramp_rate_list_type vel_ramp_rate_list;





  typedef boost::shared_ptr< ::drempower::pv_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drempower::pv_msg_<ContainerAllocator> const> ConstPtr;

}; // struct pv_msg_

typedef ::drempower::pv_msg_<std::allocator<void> > pv_msg;

typedef boost::shared_ptr< ::drempower::pv_msg > pv_msgPtr;
typedef boost::shared_ptr< ::drempower::pv_msg const> pv_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drempower::pv_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drempower::pv_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drempower::pv_msg_<ContainerAllocator1> & lhs, const ::drempower::pv_msg_<ContainerAllocator2> & rhs)
{
  return lhs.id_list == rhs.id_list &&
    lhs.input_vel_list == rhs.input_vel_list &&
    lhs.vel_ramp_rate_list == rhs.vel_ramp_rate_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drempower::pv_msg_<ContainerAllocator1> & lhs, const ::drempower::pv_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drempower

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drempower::pv_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drempower::pv_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drempower::pv_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drempower::pv_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drempower::pv_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drempower::pv_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drempower::pv_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31e2cfc3411839a2709b75ff82b9a3cb";
  }

  static const char* value(const ::drempower::pv_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31e2cfc3411839a2ULL;
  static const uint64_t static_value2 = 0x709b75ff82b9a3cbULL;
};

template<class ContainerAllocator>
struct DataType< ::drempower::pv_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drempower/pv_msg";
  }

  static const char* value(const ::drempower::pv_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drempower::pv_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[] id_list\n"
"float32[] input_vel_list\n"
"float32[] vel_ramp_rate_list\n"
;
  }

  static const char* value(const ::drempower::pv_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drempower::pv_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_list);
      stream.next(m.input_vel_list);
      stream.next(m.vel_ramp_rate_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pv_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drempower::pv_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drempower::pv_msg_<ContainerAllocator>& v)
  {
    s << indent << "id_list[]" << std::endl;
    for (size_t i = 0; i < v.id_list.size(); ++i)
    {
      s << indent << "  id_list[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.id_list[i]);
    }
    s << indent << "input_vel_list[]" << std::endl;
    for (size_t i = 0; i < v.input_vel_list.size(); ++i)
    {
      s << indent << "  input_vel_list[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.input_vel_list[i]);
    }
    s << indent << "vel_ramp_rate_list[]" << std::endl;
    for (size_t i = 0; i < v.vel_ramp_rate_list.size(); ++i)
    {
      s << indent << "  vel_ramp_rate_list[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel_ramp_rate_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DREMPOWER_MESSAGE_PV_MSG_H
