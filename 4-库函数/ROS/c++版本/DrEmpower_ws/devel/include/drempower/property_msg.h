// Generated by gencpp from file drempower/property_msg.msg
// DO NOT EDIT!


#ifndef DREMPOWER_MESSAGE_PROPERTY_MSG_H
#define DREMPOWER_MESSAGE_PROPERTY_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drempower
{
template <class ContainerAllocator>
struct property_msg_
{
  typedef property_msg_<ContainerAllocator> Type;

  property_msg_()
    : id(0)
    , address(0)
    , data_type(0)
    , value(0.0)  {
    }
  property_msg_(const ContainerAllocator& _alloc)
    : id(0)
    , address(0)
    , data_type(0)
    , value(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _id_type;
  _id_type id;

   typedef uint16_t _address_type;
  _address_type address;

   typedef uint16_t _data_type_type;
  _data_type_type data_type;

   typedef float _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::drempower::property_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drempower::property_msg_<ContainerAllocator> const> ConstPtr;

}; // struct property_msg_

typedef ::drempower::property_msg_<std::allocator<void> > property_msg;

typedef boost::shared_ptr< ::drempower::property_msg > property_msgPtr;
typedef boost::shared_ptr< ::drempower::property_msg const> property_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drempower::property_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drempower::property_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drempower::property_msg_<ContainerAllocator1> & lhs, const ::drempower::property_msg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.address == rhs.address &&
    lhs.data_type == rhs.data_type &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drempower::property_msg_<ContainerAllocator1> & lhs, const ::drempower::property_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drempower

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drempower::property_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drempower::property_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drempower::property_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drempower::property_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drempower::property_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drempower::property_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drempower::property_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5f0bb99c4a6af620b163adc9040f1e9";
  }

  static const char* value(const ::drempower::property_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5f0bb99c4a6af62ULL;
  static const uint64_t static_value2 = 0x0b163adc9040f1e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::drempower::property_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drempower/property_msg";
  }

  static const char* value(const ::drempower::property_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drempower::property_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 id\n"
"uint16 address\n"
"uint16 data_type\n"
"float32  value\n"
;
  }

  static const char* value(const ::drempower::property_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drempower::property_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.address);
      stream.next(m.data_type);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct property_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drempower::property_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drempower::property_msg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "address: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.address);
    s << indent << "data_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.data_type);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DREMPOWER_MESSAGE_PROPERTY_MSG_H
